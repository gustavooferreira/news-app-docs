openapi: 3.0.3
info:
  title: Articles Management Service
  description: |
    The primary function of this service is to store the articles metadata that the `fetcher` pulls from the RSS feeds.
  version: 1.0.0
  contact:
    name: Gustavo Ferreira
    email: gustavojcoferreira@gmail.com
servers:
- url: http://localhost:{port}{basePath}
  description: Local development
  variables:
    port:
      default: '9001'
      enum:
      - '9001'
    basePath:
      default: '/api/v1'
      enum:
      - '/api/v1'
tags:
- name: maintenance
  description: Service maintenance operations
- name: feeds
  description: Feeds operations
paths:
  /healthcheck:
    get:
      tags:
      - maintenance
      summary: Check API service health
      description: Returns status of the API service.
      responses:
        '200':
          description: Service is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthcheckResponse'
        '500':
          description: Service is not healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /articles:
    get:
      tags:
      - feeds
      summary: Get list of articles
      description: |
        This endpoint returns a list of articles metadata.

        The results are paginated. The pagination technique used is the Keyset pagination.
      parameters:
      - in: query
        name: provider
        description: RSS feed provider
        schema:
          type: string
      - in: query
        name: category
        description: RSS feed category
        schema:
          type: string
      - in: query
        name: sorting
        description: Sorting order by published date-time
        schema:
          type: string
          enum:
          - asc
          - desc
          default: desc
      - in: query
        name: limit
        description: Number of articles to return
        schema:
          type: integer
          default: 50
          maximum: 200
      - in: query
        name: after
        description: Articles to return after provided date-time
        schema:
          type: string
          format: date-time
      responses:
        '200':
          description: List of articles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Articles'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
      - feeds
      summary: Add new article metadata
      description: This endpoint adds a new article to the database.
      requestBody:
        description: Article metadata to add to the database
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '204':
          description: New article metadata added successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Article GUID already exists in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '500':
          $ref: '#/components/responses/InternalError'
  /articles:batch:
    post:
      tags:
      - feeds
      summary: Add articles metadata in batch
      description: |
        This endpoint adds new articles metadata to the database. Batch mode.

        If any of the articles in the list of articles supplied already exists in the database,
        the service will silently ignore them.
      requestBody:
        description: Articles metadata to add to the database
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Articles'
      responses:
        '204':
          description: Articles metadata have been processed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  responses:
    BadRequest:
      description: Invalid Parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
    InternalError:
      description: Internal Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
  schemas:
    ApiErrorResponse:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          description: Message explaining the error reason.
    HealthcheckResponse:
      type: object
      required:
      - status
      properties:
        status:
          type: string
          enum:
          - OK
    Articles:
      type: array
      items:
        $ref: '#/components/schemas/Article'
    Article:
      type: object
      required:
      - guid
      - title
      - description
      - link
      - published_date
      - provider
      - category
      properties:
        guid:
          type: string
        title:
          type: string
        description:
          type: string
        link:
          type: string
        published_date:
          type: string
          format: date-time
        provider:
          type: string
        category:
          type: string
